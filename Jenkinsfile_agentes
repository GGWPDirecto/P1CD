pipeline {
    agent none

    stages {
        stage('Get Code') {
            agent any
            steps {
                sh 'echo "--- Ejecutando en: $(hostname) --- Usuario: $(whoami) ---"'
                git branch: 'master', credentialsId: 'GitHub', url: 'https://github.com/GGWPDirecto/P1CD.git'
                stash name: 'source', includes: '**/*'
            }
        }

        stage('Deploy') {
            agent { label 'Nodo1falke8Bandit' }
            environment {
                PATH = "/home/ubuntu/.local/bin:${env.PATH}"
            }
            steps {
                sh 'echo "--- Ejecutando en: $(hostname) --- Usuario: $(whoami) ---"'
                unstash 'source'
                script {
                    sh '''
                    sam build
                    sam validate --region us-east-1
                    sam deploy --no-confirm-changeset --no-fail-on-empty-changeset \
                      --stack-name p1cd-stack-prod \
                      --capabilities CAPABILITY_IAM \
                      --s3-bucket p1cd-deploy-bucket-carlos \
                      --region us-east-1 \
                      --parameter-overrides Env=production
                    '''
                    def apiUrl = sh(
                        script: "aws cloudformation describe-stacks --stack-name p1cd-stack-prod --region us-east-1 --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --output text",
                        returnStdout: true
                    ).trim()

                    if (!apiUrl) {
                        error "API_GATEWAY_URL no est√° definida."
                    }
                    
                    writeFile file: 'api_url.txt', text: apiUrl
                    stash name: 'apiData', includes: 'api_url.txt'
                }
            }
        }

        stage('Rest Test') {
            agent { label 'Nodo2Pytest' }
            environment {
                PATH = "/home/ubuntu/.local/bin:${env.PATH}"
            }
            steps {
                sh 'echo "--- Ejecutando en: $(hostname) --- Usuario: $(whoami) ---"'
                unstash 'source'
                unstash 'apiData'
                script {
                    def apiUrl = readFile('api_url.txt').trim()
                    env.API_GATEWAY_URL = apiUrl
                    
                    echo "Ejecutando pruebas de solo lectura contra: ${env.API_GATEWAY_URL}"
                    sh "BASE_URL=${env.API_GATEWAY_URL} python3 -m pytest -m readonly --junitxml=report.xml test/integration/todoApiTest.py || true"
                }
            }
            post {
                always {
                    junit testResults: 'report.xml', allowEmptyResults: true
                }
            }
        }
    }
}
