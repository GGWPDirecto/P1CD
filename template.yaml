AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  todo-list-aws

  Application TODO-LIST with SAM format

# Parameters
Parameters:
  # Cambiamos 'Stage' por 'Env' para que coincida con el pipeline y la referencia en la tabla
  Env:
    Type: String
    Default: staging
    AllowedValues:
      - staging
      - production
    Description: Enter staging or production. Default is staging

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Environment:
      Variables:
        # Aquí usamos !Ref para obtener el nombre LÓGICO de la tabla.
        # El código de la Lambda usará este nombre lógico, y SAM lo resolverá al nombre físico real.
        DYNAMODB_TABLE: !Ref TodosDynamoDbTable
        ENDPOINT_OVERRIDE: ""
    
Resources:
  
  CreateTodoFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Handler: create.create
      Runtime: python3.10
      Events:
        Create:
          Type: Api
          Properties:
            Path: /todos
            Method: post
  ListTodosFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Handler: list.list
      Runtime: python3.10
      Events:
        Create:
          Type: Api
          Properties:
            Path: /todos
            Method: get
  GetTodoFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Handler: get.get
      Runtime: python3.10
      Events:
        Create:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: get
  UpdateTodoFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Handler: update.update
      Runtime: python3.10
      Events:
        Create:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: put
  DeleteTodoFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: src/
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      Handler: delete.delete
      Runtime: python3.10
      Events:
        Create:
          Type: Api
          Properties:
            Path: /todos/{id}
            Method: delete
            
  TodosDynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      # Ahora esta referencia a ${Env} es válida
      TableName: !Sub 'p1cd-todos-table-${Env}'
      AttributeDefinitions: 
        - AttributeName: id
          AttributeType: S
      KeySchema: 
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1


Outputs:
  BaseUrlApi:
    Description: "Base URL of API for the environment"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}"
  CreateTodoApi:
    Description: "API Gateway endpoint URL for Create TODO"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}/todos/"
  ListTodosApi:
    Description: "API Gateway endpoint URL for List TODOs"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}/todos"
  GetTodoApi:
    Description: "API Gateway endpoint URL for Get TODO"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}/todos/{id}"
  UpdateTodoApi:
    Description: "API Gateway endpoint URL for Update TODO"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}/todos/{id}"
  DeleteTodoApi:
    Description: "API Gateway endpoint URL for Delete TODO"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}/todos/{id}"
